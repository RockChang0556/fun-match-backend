name: CI/CD Pipeline

on:
  push:
    branches: ['main']
    paths-ignore: # 忽略一些不必要的文件
      - '.gitignore'
      - 'README.md'
      - '.vscode/**'
      - 'document/**'
      - 'logs/**'
  pull_request:
    branches: ['main']
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - production
      deploy:
        description: '是否执行部署步骤'
        required: false
        default: true
        type: boolean
      image_tag:
        description: '自定义镜像标签（留空则使用 分支-短SHA）'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建并推送镜像
  build-image:
    runs-on: ubuntu-latest
    needs: [quality-check]
    # 如果 quality-check 被跳过，则不需要等待
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped')
    outputs:
      image-tag: ${{ steps.vars.outputs.build_tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.HUB_GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Get short SHA and build tag
        id: vars
        env:
          MANUAL_IMAGE_TAG: ${{ github.event.inputs.image_tag || '' }}
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          if [ -n "$MANUAL_IMAGE_TAG" ]; then
            echo "build_tag=$MANUAL_IMAGE_TAG" >> $GITHUB_OUTPUT
          else
            echo "build_tag=${{ github.ref_name }}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          provenance: false
          sbom: false
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.build_tag }}
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest
    needs: [quality-check, build-image]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped') && needs.build-image.result == 'success' && (github.event_name != 'workflow_dispatch' || github.event.inputs.deploy == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy deployment files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PWD }}
          port: ${{ secrets.SERVER_PORT }}
          source: 'docker-compose-1panel.yml,nginx.conf,deploy-1panel.sh,setup-1panel.sh'
          target: '/home/${{ secrets.SERVER_USERNAME }}/nestjs-backend/'

      - name: Deploy to server with 1Panel
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PWD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e

            # 进入部署目录
            cd /home/${{ secrets.SERVER_USERNAME }}/nestjs-backend/

            # 设置执行权限
            chmod +x deploy-1panel.sh

            # 登录到容器注册表
            echo "${{ secrets.HUB_GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # 使用 1Panel 优化脚本部署
            ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
            ./deploy-1panel.sh "$ENVIRONMENT" "${{ needs.build-image.outputs.image-tag }}"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ 部署成功完成！"
          else
            echo "❌ 部署失败，请检查日志"
          fi
